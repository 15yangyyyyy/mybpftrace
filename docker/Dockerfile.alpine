# Dockerfile for building static bpftrace with musl libc
FROM alpine:3.19

# Add edge testing repository for some packages
RUN echo "https://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories && \
    echo "https://dl-cdn.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories

RUN apk add --update \
  asciidoctor \
  argp-standalone \
  bash \
  binutils-dev \
  bison \
  bpftrace \
  bcc-dev \
  bcc-static \
  bzip2-dev \
  bzip2-static \
  build-base \
  cereal \
  clang17-dev \
  clang17-extra-tools \
  clang17-libs \
  clang17-static \
  cmake \
  elfutils-dev \
  flex-dev \
  git \
  libbpf-dev \
  libelf-static \
  libpcap-dev \
  libc6-compat \
  linux-headers \
  llvm17-dev \
  llvm17-static \
  musl-dev \
  openssl-dev \
  python3 \
  wget \
  xxd \
  xz-dev \
  xz-static \
  zlib-dev \
  zlib-static \
  zstd-dev \
  zstd-static \
  grep \
  sed \
  findutils

# Create required symbolic links
RUN ln -s /usr/lib/llvm17/lib/libclang-cpp.a /usr/lib/libclang-cpp.a && \
    ln -s /usr/lib/llvm17/lib/libclang.a /usr/lib/libclang.a && \
    ln -s /usr/include/llvm17/llvm /usr/include/llvm && \
    ln -s /usr/include/llvm17/llvm-c /usr/include/llvm-c && \
    ln -s /usr/include/clang17 /usr/include/clang

# Fix LLVM expecting to use shared zstd lib by modifying the config
RUN find /usr -name "*.cmake" -type f -exec grep -l "zstd::libzstd_shared" {} \; | \
    xargs -r sed -i 's/zstd::libzstd_shared/zstd::libzstd_static/g'

# Create a symlink for clang cmake files
RUN ln -s 'clang17' /usr/lib/cmake/clang

# Some versions of Alpine may need this symlink
RUN if [ ! -e /lib/ld-musl-x86_64.so.1 ] && [ -e /lib/libc.musl-x86_64.so.1 ]; then \
    ln -s /lib/libc.musl-x86_64.so.1 /lib/ld-musl-x86_64.so.1; \
fi

# Create stubs for missing LLVM components
RUN mkdir -p /tmp/empty && cd /tmp/empty && \
    echo "void __llvm_stub() {}" > stub.c && \
    gcc -c stub.c -o stub.o && \
    mkdir -p /usr/lib/llvm17/lib && \
    for lib in libLLVMTestingAnnotations.a libLLVMTestingSupport.a libLLVMFrontendOpenMP.a libLLVMFrontenddriver.a libLLVMFrontendOffloading.a libLLVMOrcJIT.a; do \
        echo "Creating stub for $lib"; \
        ar rcs /usr/lib/llvm17/lib/$lib stub.o; \
    done && \
    # List created stub libraries
    echo "Stub libraries created:" && \
    ls -la /usr/lib/llvm17/lib/*.a

# Compile and install newer libbpf version
RUN apk add --no-cache git make gcc musl-dev elfutils-dev && \
    cd /tmp && \
    git clone https://github.com/libbpf/libbpf.git && \
    cd libbpf && \
    git checkout v1.5.0 && \
    cd src && \
    make -j$(nproc) && \
    DESTDIR=/usr make install_headers && \
    DESTDIR=/usr make install_uapi_headers && \
    DESTDIR=/usr make install && \
    echo "Installed libbpf version:" && \
    cat /usr/include/bpf/libbpf_version.h

# Create custom cmake modules directory and FindLLVM.cmake
RUN mkdir -p /usr/local/share/cmake/Modules && \
    echo '# Custom FindLLVM.cmake that bypasses problematic components' > /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo 'set(LLVM_FOUND TRUE)' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo 'set(LLVM_INCLUDE_DIRS "/usr/include/llvm17")' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo 'set(LLVM_LIBRARY_DIRS "/usr/lib/llvm17/lib")' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '# Use llvm-config binary to get information' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo 'find_program(LLVM_CONFIG_EXE NAMES llvm-config llvm-config-17)' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo 'if(LLVM_CONFIG_EXE)' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  message(STATUS "Found llvm-config at ${LLVM_CONFIG_EXE}")' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  ' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  # Get LLVM version' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  execute_process(' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '    COMMAND ${LLVM_CONFIG_EXE} --version' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '    OUTPUT_VARIABLE LLVM_VERSION' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '    OUTPUT_STRIP_TRAILING_WHITESPACE' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  )' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  ' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  # Get LLVM library list (without problematic ones)' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  execute_process(' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '    COMMAND ${LLVM_CONFIG_EXE} --libs' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '    OUTPUT_VARIABLE LLVM_LIBRARIES' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '    OUTPUT_STRIP_TRAILING_WHITESPACE' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  )' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  ' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  # Convert to CMake list' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  string(REPLACE " " ";" LLVM_LIBRARIES "${LLVM_LIBRARIES}")' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  ' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  # Get LLVM system libraries' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  execute_process(' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '    COMMAND ${LLVM_CONFIG_EXE} --system-libs' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '    OUTPUT_VARIABLE LLVM_SYSTEM_LIBS' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '    OUTPUT_STRIP_TRAILING_WHITESPACE' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  )' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  ' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  # Convert to CMake list' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  string(REPLACE " " ";" LLVM_SYSTEM_LIBS "${LLVM_SYSTEM_LIBS}")' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  ' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  # Define core LLVM components - important for bpftrace to work' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  set(LLVM_AVAILABLE_LIBS ' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '      LLVMX86Info LLVMX86Desc LLVMObject LLVMBitReader LLVMCore LLVMSupport' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '      LLVMTransformUtils LLVMTarget LLVMAnalysis LLVMMC LLVMMCParser LLVMProfileData' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '      LLVMScalarOpts LLVMBinaryFormat LLVMRemarks' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  )' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo 'else()' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  message(WARNING "llvm-config not found, setting minimal LLVM configuration")' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  set(LLVM_AVAILABLE_LIBS ' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '      LLVMX86Info LLVMX86Desc LLVMObject LLVMBitReader LLVMCore LLVMSupport' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '  )' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo 'endif()' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo '' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo 'include(FindPackageHandleStandardArgs)' >> /usr/local/share/cmake/Modules/FindLLVM.cmake && \
    echo 'find_package_handle_standard_args(LLVM DEFAULT_MSG LLVM_FOUND)' >> /usr/local/share/cmake/Modules/FindLLVM.cmake

# If bcc-dev doesn't provide all needed files, compile from source
RUN if [ ! -f "/usr/include/bcc/bcc_version.h" ]; then \
    apk add --no-cache cmake git python3 llvm17-dev clang17-dev flex-dev bison \
                       build-base linux-headers elfutils-dev python3-dev && \
    git clone https://github.com/iovisor/bcc.git /tmp/bcc && \
    cd /tmp/bcc && \
    git checkout v0.28.0 && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr \
          -DENABLE_LLVM_SHARED=0 \
          -DCMAKE_C_COMPILER=/usr/bin/clang \
          -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
          .. && \
    make -j$(nproc) && \
    make install && \
    cd / && rm -rf /tmp/bcc; \
fi

# Create a build script that will be executed in the container
COPY build-alpine.sh /build-alpine.sh
RUN chmod +x /build-alpine.sh

WORKDIR /bpftrace
ENTRYPOINT ["/build-alpine.sh"]
