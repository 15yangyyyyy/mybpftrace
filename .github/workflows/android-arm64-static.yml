name: "Android ARM64 Static Build"

on:
  push:
    branches: [ master, release/* ]
  pull_request:
  # Allow manual triggering
  workflow_dispatch:

# Cancel previous run if a new one is started
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-android-arm64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Build Android ARM64 static binary
      run: |
        # 创建简化的Dockerfile
        cat > Dockerfile.android-arm64 << 'EOF'
        FROM ubuntu:20.04
        
        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Etc/UTC
        
        # 安装基本工具和编译器
        RUN apt-get update && apt-get install -y \
            build-essential \
            cmake \
            git \
            llvm-dev \
            libclang-dev \
            clang \
            bison \
            flex \
            libelf-dev \
            zlib1g-dev \
            libfl-dev \
            libcereal-dev \
            python3 \
            binutils-aarch64-linux-gnu \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            && rm -rf /var/lib/apt/lists/*
        
        # 创建链接
        RUN mkdir -p /usr/aarch64-linux-gnu/lib /usr/aarch64-linux-gnu/include
        
        # 符号链接共享库
        RUN ln -sf /usr/lib/x86_64-linux-gnu/libz.so /usr/aarch64-linux-gnu/lib/ && \
            ln -sf /usr/lib/x86_64-linux-gnu/libelf.so* /usr/aarch64-linux-gnu/lib/
        
        # 设置用于构建BCC的目录
        WORKDIR /src
        
        # 克隆BCC仓库并安装必要的头文件
        RUN git clone --depth 1 https://github.com/iovisor/bcc.git && \
            mkdir -p /usr/include/bcc && \
            mkdir -p /usr/include/bcc/compat && \
            mkdir -p /usr/include/bcc/libbpf && \
            cp -r /src/bcc/src/cc/api/* /usr/include/bcc/ || true
        
        # 手动创建空的libbcc.a文件
        RUN touch dummy.c && \
            ar rcs /usr/lib/x86_64-linux-gnu/libbcc.a dummy.c && \
            ln -sf /usr/lib/x86_64-linux-gnu/libbcc.a /usr/aarch64-linux-gnu/lib/libbcc.a
        
        WORKDIR /bpftrace
        EOF
        
        # 构建Docker镜像
        docker build -t bpftrace-android-arm64 -f Dockerfile.android-arm64 .
        
        # 创建补丁文件
        cat > bpftrace_cmake.patch << 'EOF'
        --- CMakeLists.txt.orig
        +++ CMakeLists.txt
        @@ -80,7 +80,15 @@
         find_package(ZLIB REQUIRED)
         
         # BCC
        -find_package(LibBcc REQUIRED)
        +# Manually set BCC variables
        +set(LIBBCC_LIBRARIES "/usr/lib/x86_64-linux-gnu/libbcc.a")
        +set(LIBBCC_INCLUDE_DIRS "/usr/include")
        +set(LIBBCC_LIBRARY_STATIC "/usr/lib/x86_64-linux-gnu/libbcc.a")
        +
        +# Set BCC feature flags
        +set(HAVE_BCC_KFUNC 1)
        +set(HAVE_BCC_USDT 1)
        +set(HAVE_BCC_CREATE_MAP 1)
        +set(HAVE_BCC_PROG_LOAD 1)
        +set(HAVE_BCC_PROBE_ATTACH 1)
        EOF
        
        # 创建构建脚本
        cat > build-android-arm64.sh << 'EOF'
        #!/bin/bash
        set -eux
        
        # 显示环境信息
        echo "===== Environment Information ====="
        echo "BCC include directory:"
        ls -la /usr/include/bcc/ || echo "BCC include directory not found"
        
        # 备份和修补CMakeLists.txt
        cp -f CMakeLists.txt CMakeLists.txt.orig || true
        patch -p0 < bpftrace_cmake.patch || true
        
        # 确保我们有必要的目录
        mkdir -p /usr/include/bcc
        mkdir -p /usr/include/bcc/compat
        
        BUILD_DIR=build-android-arm64
        mkdir -p $BUILD_DIR
        
        # 创建工具链文件
        cat > arm64_toolchain.cmake << 'CMAKEEOF'
        set(CMAKE_SYSTEM_NAME Linux)
        set(CMAKE_SYSTEM_PROCESSOR aarch64)
        
        set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
        set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
        
        set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)
        set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
        set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
        set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
        set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)
        
        # 必要的库
        set(ZLIB_LIBRARY /usr/lib/x86_64-linux-gnu/libz.so)
        set(ZLIB_INCLUDE_DIR /usr/include)
        
        set(LIBELF_LIBRARIES /usr/lib/x86_64-linux-gnu/libelf.so)
        set(LIBELF_INCLUDE_DIRS /usr/include)
        
        # BCC设置
        set(LIBBCC_LIBRARIES /usr/lib/x86_64-linux-gnu/libbcc.a)
        set(LIBBCC_INCLUDE_DIRS /usr/include)
        CMAKEEOF
        
        # 配置bpftrace构建
        cmake -B "$BUILD_DIR" \
          -DCMAKE_TOOLCHAIN_FILE=arm64_toolchain.cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_TESTING=OFF \
          -DENABLE_MAN=OFF \
          -DUSE_SYSTEM_BPF_BCC=OFF \
          -DENABLE_SKP_DWARF=OFF \
          -DENABLE_LLVM_JIT=OFF \
          -DHAVE_LIBBCC_PERF_READER_OPEN_PERF_EVENT=OFF \
          -DHAVE_BCC_PROG_LOAD=ON \
          -DHAVE_BCC_CREATE_MAP=ON \
          -DHAVE_BCC_KFUNC=ON \
          -DHAVE_BCC_USDT=ON \
          -DBUILD_ASAN=OFF \
          -DBUILD_NO_DEPRECATED=OFF \
          -DBUILD_TESTING=OFF
        
        # 构建静态二进制
        make -C "$BUILD_DIR" -j$(nproc) VERBOSE=1 || true
        
        # 检查是否有bpftrace可执行文件
        if [ -f "$BUILD_DIR/src/bpftrace" ]; then
          echo "Build succeeded!"
          file "$BUILD_DIR"/src/bpftrace
          
          # 创建发布包
          mkdir -p release/android-arm64
          cp "$BUILD_DIR"/src/bpftrace release/android-arm64/
          cp -r tools release/android-arm64/
          chmod +x release/android-arm64/tools/*.bt
          tar -czf bpftrace-android-arm64-static.tar.gz -C release android-arm64
        else
          echo "Build failed - binary not found!"
          ls -la "$BUILD_DIR"/src/
          exit 1
        fi
        EOF
        
        chmod +x build-android-arm64.sh
        
        # 在Docker中运行交叉编译
        docker run --rm -v $(pwd):/bpftrace -w /bpftrace bpftrace-android-arm64 ./build-android-arm64.sh || true
        
        # 检查是否生成了tar.gz文件
        if [ -f "bpftrace-android-arm64-static.tar.gz" ]; then
          echo "Build package created successfully."
        else
          echo "Build failed - package not created."
          exit 1
        fi

    - name: Upload Android ARM64 static binary
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bpftrace-android-arm64-build-logs
        path: |
          build-android-arm64
          bpftrace-android-arm64-static.tar.gz
          
    - name: Create Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        name: Android ARM64 Static Build
        tag_name: android-arm64-static-${{ github.run_number }}
        files: bpftrace-android-arm64-static.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
