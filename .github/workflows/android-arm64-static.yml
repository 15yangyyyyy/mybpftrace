name: "Android ARM64 Static Build"

on:
  push:
    branches: [ master, release/* ]
  pull_request:
  # Allow manual triggering
  workflow_dispatch:

# Cancel previous run if a new one is started
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-android-arm64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Build Android ARM64 static binary
      run: |
        # 创建Dockerfile
        cat > Dockerfile.android-arm64 << 'EOF'
        FROM debian:bullseye
        
        ENV DEBIAN_FRONTEND=noninteractive
        
        # 安装基本工具和交叉编译工具链
        RUN apt-get update && apt-get install -y \
            build-essential \
            cmake \
            git \
            pkg-config \
            python3 \
            bison \
            flex \
            libelf-dev \
            zlib1g-dev \
            libssl-dev \
            libzstd-dev \
            libbpf-dev \
            llvm-11-dev \
            clang-11 \
            libclang-11-dev \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            binutils-aarch64-linux-gnu \
            wget \
            software-properties-common \
            lsb-release
        
        # 创建必要的符号链接，确保交叉编译器可以找到本地库
        RUN mkdir -p /usr/aarch64-linux-gnu/lib \
            && ln -s /usr/lib/x86_64-linux-gnu/libz.a /usr/aarch64-linux-gnu/lib/ \
            && ln -s /usr/lib/x86_64-linux-gnu/libzstd.a /usr/aarch64-linux-gnu/lib/ \
            && ln -s /usr/lib/x86_64-linux-gnu/libelf.a /usr/aarch64-linux-gnu/lib/
        
        # 尝试不从源码编译libbcc，而是使用系统的动态库模式
        # 将bpftrace配置成直接使用内核头文件而不是通过libbcc
        
        # 下载bpftrace源码
        WORKDIR /root
        
        # 安装cereal
        RUN apt-get install -y libcereal-dev
        
        WORKDIR /bpftrace
        EOF
        
        # 构建Docker镜像
        docker build -t bpftrace-android-arm64 -f Dockerfile.android-arm64 .
        
        # 创建构建脚本
        cat > build-android-arm64.sh << 'EOF'
        #!/bin/bash
        set -eux
        
        # 显示环境信息以便调试
        echo "Environment setup:"
        echo "Listing aarch64-linux-gnu directory:"
        ls -la /usr/aarch64-linux-gnu/ || true
        echo "Listing aarch64-linux-gnu/lib directory:"
        ls -la /usr/aarch64-linux-gnu/lib/ || true
        
        BUILD_DIR=build-android-arm64
        mkdir -p $BUILD_DIR
        
        # 检查源代码是否有BTF.h文件（新版bpftrace可能需要）
        if [ -f src/btf.h ]; then
          echo "BTF.h exists in source"
        else
          echo "BTF.h not found in source"
        fi
        
        # 准备CMake工具链文件
        cat > arm64_toolchain.cmake << 'CMAKEEOF'
        set(CMAKE_SYSTEM_NAME Linux)
        set(CMAKE_SYSTEM_PROCESSOR aarch64)
        
        set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
        set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
        
        set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)
        set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
        set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
        set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
        set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)
        
        # 这些库我们将使用本地库进行链接
        set(ZLIB_LIBRARY /usr/lib/x86_64-linux-gnu/libz.a)
        set(ZLIB_INCLUDE_DIR /usr/include)
        
        set(LIBZSTD_LIBRARY /usr/lib/x86_64-linux-gnu/libzstd.a)
        set(LIBZSTD_INCLUDE_DIR /usr/include)
        
        set(LIBELF_LIBRARIES /usr/lib/x86_64-linux-gnu/libelf.a)
        set(LIBELF_INCLUDE_DIRS /usr/include)
        CMAKEEOF
        
        # 使用最精简的配置，不依赖BCC
        cmake -B "$BUILD_DIR" \
          -DCMAKE_TOOLCHAIN_FILE=arm64_toolchain.cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_TESTING=OFF \
          -DSTATIC_LINKING=ON \
          -DUSE_SYSTEM_BPF_BCC=OFF \
          -DKERNEL_INCLUDE_DIRS=/usr/include \
          -DENABLE_MAN=OFF
        
        # 构建bpftrace
        make -C "$BUILD_DIR" -j$(nproc) VERBOSE=1 || true
        
        if [ -f "$BUILD_DIR/src/bpftrace" ]; then
          echo "Build successful! Binary exists."
          
          # 检查是否为ARM64二进制文件
          file "$BUILD_DIR"/src/bpftrace | tee binary_info.txt
          if ! grep -q "aarch64" binary_info.txt; then
            echo "WARNING: Binary does not appear to be aarch64"
            cat binary_info.txt
          fi
          
          # 创建发布包
          mkdir -p release/android-arm64
          cp "$BUILD_DIR"/src/bpftrace release/android-arm64/
          cp -r tools release/android-arm64/
          chmod +x release/android-arm64/tools/*.bt
          tar -czf bpftrace-android-arm64-static.tar.gz -C release android-arm64
          echo "Build package created successfully."
        else
          echo "Build failed - binary not found!"
          ls -la "$BUILD_DIR"/src/
          exit 1
        fi
        EOF
        
        chmod +x build-android-arm64.sh
        
        # 在Docker中运行交叉编译
        docker run --rm -v $(pwd):/bpftrace -w /bpftrace bpftrace-android-arm64 ./build-android-arm64.sh

    - name: Upload Android ARM64 static binary
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: bpftrace-android-arm64-static
        path: bpftrace-android-arm64-static.tar.gz
        
    - name: Create Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        name: Android ARM64 Static Build
        tag_name: android-arm64-static-${{ github.run_number }}
        files: bpftrace-android-arm64-static.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
