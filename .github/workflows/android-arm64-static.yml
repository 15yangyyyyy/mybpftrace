name: "Android ARM64 Static Build"

on:
  workflow_dispatch:

jobs:
  build-android-arm64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Build Android ARM64 static binary
      run: |
        # Create Dockerfile for Android ARM64 build environment
        cat > Dockerfile.android-arm64 << 'EOF'
        FROM ubuntu:22.04

        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Etc/UTC

        # Install basic dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            cmake \
            git \
            wget \
            curl \
            gnupg \
            software-properties-common \
            apt-transport-https \
            ca-certificates \
            python3 \
            bison \
            flex \
            libelf-dev \
            zlib1g-dev \
            libfl-dev \
            libcereal-dev \
            liblzma-dev \
            libiberty-dev \
            libzstd-dev \
            libncurses-dev \
            autoconf \
            libtool \
            binutils-aarch64-linux-gnu \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libdwarf-dev \
            libdw-dev \
            binutils-dev \
            libxml2-dev \
            pkg-config \
            sed

        # Install LLVM 16
        RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \
            echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main" >> /etc/apt/sources.list.d/llvm.list && \
            apt-get update && \
            apt-get install -y \
                llvm-16 \
                llvm-16-dev \
                clang-16 \
                libclang-16-dev \
                libllvm16 \
                libz3-dev && \
            # Check installation
            ls -la /usr/bin/llvm-config-16 && \
            /usr/bin/llvm-config-16 --version

        # Set LLVM 16 as default
        RUN update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-16 100 && \
            update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100
                
        # Create ARM64 cross-compilation toolkit directories
        RUN mkdir -p /usr/aarch64-linux-gnu/include /usr/aarch64-linux-gnu/lib
            
        # Download and install libbpf using git instead of tarball
        WORKDIR /opt
        
        # Clone libbpf directly from git
        RUN git clone https://github.com/libbpf/libbpf.git && \
            cd libbpf && \
            git checkout v1.8.0 && \
            cd src && \
            make BUILD_STATIC_ONLY=y OBJDIR=/tmp/libbpf DESTDIR=/tmp/libbpf install && \
            cp -r /tmp/libbpf/usr/lib64/libbpf.a /usr/lib/ && \
            cp -r /tmp/libbpf/usr/include/* /usr/include/ && \
            cp -r /tmp/libbpf/usr/lib64/libbpf.a /usr/aarch64-linux-gnu/lib/ && \
            cp -r /tmp/libbpf/usr/include/* /usr/aarch64-linux-gnu/include/ && \
            ls -la /usr/lib/libbpf.a && \
            find /usr/include -name "bpf*.h" | sort

        # Create static build directory
        WORKDIR /src

        # Clone bcc just for the headers (we don't build the library)
        RUN git clone https://github.com/iovisor/bcc.git -b v0.24.0 && \
            mkdir -p /usr/include/bcc /usr/aarch64-linux-gnu/include/bcc && \
            cp -r /src/bcc/src/cc/api/* /usr/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/libbpf.h /usr/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/bcc_common.h /usr/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/bcc_exception.h /usr/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/api/* /usr/aarch64-linux-gnu/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/libbpf.h /usr/aarch64-linux-gnu/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/bcc_common.h /usr/aarch64-linux-gnu/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/bcc_exception.h /usr/aarch64-linux-gnu/include/bcc/ || true

        # Install additional dependencies that might be needed
        RUN apt-get update && apt-get install -y \
            libzstd-dev \
            libxml2-dev \
            zlib1g-dev \
            libdw-dev

        WORKDIR /bpftrace
        EOF

        # Build Docker image
        docker build -t bpftrace-android-arm64 -f Dockerfile.android-arm64 .

        # Create build script
        cat > build-android-arm64.sh << 'EOF'
        #!/bin/bash
        set -ex

        # Display environment information
        echo "===== Environment Information ====="
        echo "LLVM version:"
        llvm-config --version
        echo "Include header directories:"
        ls -la /usr/include/bcc/
        ls -la /usr/include/bpf/
        echo "libbpf library:"
        find /usr -name libbpf.a
        echo "libbpf version:"
        grep -r "LIBBPF_.*_VERSION" /usr/include/bpf/libbpf_version.h || echo "Version file not found"

        # Create cross-compilation toolchain file
        cat > arm64_tool
