name: "Android ARM64 Static Build"

on:
  workflow_dispatch:

jobs:
  build-android-arm64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Build Android ARM64 static binary
      run: |
        # Create Dockerfile for Android ARM64 build environment
        cat > Dockerfile.android-arm64 << 'EOF'
        FROM ubuntu:22.04

        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Etc/UTC

        # Install basic dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            cmake \
            git \
            wget \
            curl \
            gnupg \
            software-properties-common \
            apt-transport-https \
            ca-certificates \
            python3 \
            bison \
            flex \
            libelf-dev \
            zlib1g-dev \
            libfl-dev \
            libcereal-dev \
            liblzma-dev \
            libiberty-dev \
            libzstd-dev \
            libncurses-dev \
            autoconf \
            libtool \
            binutils-aarch64-linux-gnu \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libdwarf-dev \
            libdw-dev \
            binutils-dev \
            libxml2-dev \
            pkg-config \
            sed

        # Install LLVM 16
        RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \
            echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main" >> /etc/apt/sources.list.d/llvm.list && \
            apt-get update && \
            apt-get install -y \
                llvm-16 \
                llvm-16-dev \
                clang-16 \
                libclang-16-dev \
                libllvm16 \
                libz3-dev && \
            # Check installation
            ls -la /usr/bin/llvm-config-16 && \
            /usr/bin/llvm-config-16 --version

        # Set LLVM 16 as default
        RUN update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-16 100 && \
            update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100
                
        # Create ARM64 cross-compilation toolkit directories
        RUN mkdir -p /usr/aarch64-linux-gnu/include /usr/aarch64-linux-gnu/lib
        
        # Install ARM64 cross-compilation essential packages
        RUN apt-get update && apt-get install -y \
            libzstd-dev:arm64 \
            libxml2-dev:arm64 \
            zlib1g-dev:arm64 \
            libdw-dev:arm64 \
            libelf-dev:arm64 \
            liblzma-dev:arm64
            
        # Install libbpf v1.5.0
        WORKDIR /opt
        RUN git clone https://github.com/libbpf/libbpf.git && \
            cd libbpf && \
            git checkout v1.5.0 && \
            cd src && \
            make BUILD_STATIC_ONLY=y OBJDIR=/tmp/libbpf DESTDIR=/tmp/libbpf install && \
            cp -r /tmp/libbpf/usr/lib64/libbpf.a /usr/lib/ && \
            cp -r /tmp/libbpf/usr/include/* /usr/include/ && \
            cp -r /tmp/libbpf/usr/lib64/libbpf.a /usr/aarch64-linux-gnu/lib/ && \
            cp -r /tmp/libbpf/usr/include/* /usr/aarch64-linux-gnu/include/ && \
            ls -la /usr/lib/libbpf.a && \
            find /usr/include -name "bpf*.h" | sort && \
            cat /usr/include/bpf/libbpf_version.h

        # Get BCC headers (but not the library, since we'll use libbpf)
        WORKDIR /src
        RUN git clone https://github.com/iovisor/bcc.git -b v0.24.0 --depth 1 && \
            mkdir -p /usr/include/bcc /usr/aarch64-linux-gnu/include/bcc && \
            cp -r /src/bcc/src/cc/api/* /usr/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/libbpf.h /usr/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/bcc_common.h /usr/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/bcc_exception.h /usr/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/api/* /usr/aarch64-linux-gnu/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/libbpf.h /usr/aarch64-linux-gnu/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/bcc_common.h /usr/aarch64-linux-gnu/include/bcc/ || true && \
            cp -r /src/bcc/src/cc/bcc_exception.h /usr/aarch64-linux-gnu/include/bcc/ || true

        WORKDIR /bpftrace
        EOF

        # Build Docker image
        docker build -t bpftrace-android-arm64 -f Dockerfile.android-arm64 .

        # Create build script
        cat > build-android-arm64.sh << 'EOF'
        #!/bin/bash
        set -ex

        # Display environment information
        echo "===== Environment Information ====="
        echo "LLVM version:"
        llvm-config --version
        echo "Include header directories:"
        ls -la /usr/include/bcc/
        ls -la /usr/include/bpf/
        echo "libbpf library:"
        find /usr -name libbpf.a
        echo "libbpf version:"
        cat /usr/include/bpf/libbpf_version.h

        # Create cross-compilation toolchain file
        cat > arm64_toolchain.cmake << 'CMAKEEOF'
        set(CMAKE_SYSTEM_NAME Linux)
        set(CMAKE_SYSTEM_PROCESSOR aarch64)

        set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
        set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)

        set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)
        set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
        set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
        set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
        set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)

        # Libraries
        set(ZLIB_LIBRARY /usr/lib/aarch64-linux-gnu/libz.a)
        set(ZLIB_INCLUDE_DIR /usr/include)

        set(LIBELF_LIBRARIES /usr/lib/aarch64-linux-gnu/libelf.a)
        set(LIBELF_INCLUDE_DIRS /usr/include)

        set(LIBLZMA_LIBRARIES /usr/lib/aarch64-linux-gnu/liblzma.a)
        set(LIBLZMA_INCLUDE_DIRS /usr/include)

        # LIBBPF settings
        set(LIBBPF_LIBRARIES /usr/aarch64-linux-gnu/lib/libbpf.a)
        set(LIBBPF_INCLUDE_DIRS /usr/include/bpf)
        CMAKEEOF

        # Patch the CMakeLists.txt to better handle our cross-compilation case
        echo "Applying necessary patches to build system..."

        # 1. Make LibBcc optional to avoid that dependency
        if grep -q "find_package(LibBcc REQUIRED)" CMakeLists.txt; then
          echo "Patching CMakeLists.txt to make LibBcc optional"
          sed -i 's/find_package(LibBcc REQUIRED)/find_package(LibBcc)/' CMakeLists.txt
        fi

        # 2. Remove the libbpf version check that's causing issues
        if grep -q "bpftrace requires libbpf .* or greater" CMakeLists.txt; then
          echo "Removing libbpf version check"
          sed -i 's/if(LIBBPF_FOUND AND LIBBPF_VERSION VERSION_LESS.*/if(FALSE)/' CMakeLists.txt
        fi

        # 3. Skip building man pages
        if grep -q "option(ENABLE_MAN" CMakeLists.txt; then
          echo "Disabling man pages"
          sed -i 's/option(ENABLE_MAN.*/option(ENABLE_MAN "Build and install man pages" OFF)/' CMakeLists.txt
        fi

        # 4. Disable any features that might cause build issues in cross-compilation
        if grep -q "BPF_ATTACHPOINT_SUPPORTS_AUTO" CMakeLists.txt; then
          echo "Disabling BPF_ATTACHPOINT_SUPPORTS_AUTO detection in build"
          sed -i 's/CHECK_CXX_SOURCE_COMPILES(.*BPF_ATTACHPOINT_SUPPORTS_AUTO.*/set(HAVE_BPF_PROG_ATTACH_OPTS 0)/' CMakeLists.txt
        fi

        echo "Building static bpftrace for ARM64..."
        mkdir -p build-android-arm64
        cd build-android-arm64

        # Configure with CMake
        LLVM_REQUESTED_VERSION=16 cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=../arm64_toolchain.cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DBUILD_TESTING=OFF \
          -DSTATIC_LINKING=ON \
          -DUSE_LIBCC_POINTER_LOOKUP=OFF \
          -DALLOW_UNSAFE_PROBE=ON \
          -DBUILD_SHARED_LIBS=OFF \
          -DENABLE_MAN=OFF \
          -DENABLE_LLVM_JIT=OFF \
          -DLIBBCC_ATTACH_KPROBE_SIX_ARGS_SIGNATURE=OFF \
          -DLIBBCC_ATTACH_UPROBE_SEVEN_ARGS_SIGNATURE=OFF \
          -DENABLE_LLVM_JIT=OFF

        # Build - first try with multiple cores, fallback to single thread if issues
        make -j$(nproc) VERBOSE=1 || make VERBOSE=1

        # Check for the binary
        if [ -f "src/bpftrace" ]; then
          echo "Build successful!"
          file src/bpftrace
          
          # Create release package
          mkdir -p release/android-arm64
          cp src/bpftrace release/android-arm64/
          
          # Copy tools if available
          if [ -d "../tools" ]; then
            cp -r ../tools release/android-arm64/
            chmod +x release/android-arm64/tools/*.bt 2>/dev/null || true
          fi
          
          tar -czf /bpftrace/bpftrace-android-arm64-static.tar.gz -C release android-arm64
          echo "Package created: bpftrace-android-arm64-static.tar.gz"
        else
          echo "Build failed - bpftrace binary not found!"
          echo "==== Build Error Information ===="
          find . -name "*.log" | xargs cat
          exit 1
        fi
        EOF

        chmod +x build-android-arm64.sh

        # Run cross-compilation in Docker
        docker run --rm -v $(pwd):/bpftrace -w /bpftrace bpftrace-android-arm64 ./build-android-arm64.sh || true

        # Check if the tar.gz file was created
        if [ -f "bpftrace-android-arm64-static.tar.gz" ]; then
          echo "Build package created successfully."
        else
          echo "Build failed - package not created."
          exit 1
        fi

    - name: Upload Android ARM64 static binary artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bpftrace-android-arm64-build-logs
        path: |
          build*
          bpftrace-android-arm64-static.tar.gz
          
    - name: Create Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        name: Android ARM64 Static Build
        tag_name: android-arm64-static-${{ github.run_number }}
        files: bpftrace-android-arm64-static.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
