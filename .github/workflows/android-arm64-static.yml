name: "Android ARM64 Static Build"

on:
  push:
    branches: [ master, release/* ]
  pull_request:
  # Allow manual triggering
  workflow_dispatch:

# Cancel previous run if a new one is started
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-android-arm64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Android ARM64 static binary
      run: |
        # Create Dockerfile for ARM64 cross-compilation
        cat > Dockerfile.android-arm64 << 'EOF'
FROM alpine:3.21

# Install cross-compilation tools and dependencies
RUN apk add --update \
  asciidoctor \
  argp-standalone \
  bash \
  bcc-dev \
  bcc-static \
  binutils-dev \
  bison \
  bzip2-static \
  build-base \
  cereal \
  clang18-dev \
  clang18-extra-tools \
  clang18-static \
  cmake \
  elfutils-dev \
  flex-dev \
  git \
  libbpf-dev \
  libelf-static \
  libpcap-dev \
  libc6-compat \
  linux-headers \
  llvm18-dev \
  llvm18-gtest \
  llvm18-static \
  musl-obstack-dev \
  openssl-dev \
  pahole \
  procps \
  python3 \
  wget \
  xxd \
  xz-static \
  zlib-dev \
  zlib-static \
  zstd-dev \
  zstd-static \
  gcc-aarch64 \
  g++-aarch64 \
  aarch64-none-linux-musl-dev

# Work around zstd dynamic linking issue
RUN sed -i 's/libzstd_shared/libzstd_static/g' /usr/lib/llvm18/lib/cmake/llvm/LLVMExports.cmake

# Create clang symlink
RUN ln -s 'clang18' /usr/lib/cmake/clang

WORKDIR /bpftrace
EOF
        
        # Build the Docker image for cross-compilation
        docker build -t bpftrace-android-arm64 -f Dockerfile.android-arm64 .
        
        # Create script to build bpftrace statically for ARM64
        cat > build-android-arm64.sh << 'EOF'
#!/bin/bash
set -eux

BUILD_DIR=build-android-arm64
mkdir -p $BUILD_DIR

# Configure for ARM64 cross-compilation
cmake -B "$BUILD_DIR" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_VERBOSE_MAKEFILE=ON \
  -DBUILD_TESTING=OFF \
  -DSTATIC_LINKING=ON \
  -DCMAKE_C_COMPILER=aarch64-none-linux-musl-gcc \
  -DCMAKE_CXX_COMPILER=aarch64-none-linux-musl-g++ \
  -DCMAKE_SYSTEM_NAME=Linux \
  -DCMAKE_SYSTEM_PROCESSOR=aarch64

# Build bpftrace
make -C "$BUILD_DIR" -j$(nproc)

# Verify it's an ARM64 binary
file "$BUILD_DIR"/src/bpftrace | grep -q "aarch64"

# Create a release package
mkdir -p release/android-arm64
cp "$BUILD_DIR"/src/bpftrace release/android-arm64/
cp -r tools release/android-arm64/
chmod +x release/android-arm64/tools/*.bt
tar -czf bpftrace-android-arm64-static.tar.gz -C release android-arm64
EOF
        
        chmod +x build-android-arm64.sh
        
        # Run the cross-compilation in Docker
        docker run --rm -v $(pwd):/bpftrace -w /bpftrace bpftrace-android-arm64 ./build-android-arm64.sh

    - name: Upload Android ARM64 static binary
      uses: actions/upload-artifact@v4
      with:
        name: bpftrace-android-arm64-static
        path: bpftrace-android-arm64-static.tar.gz
