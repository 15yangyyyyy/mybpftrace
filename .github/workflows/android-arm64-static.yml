name: "Android ARM64 Static Build"

on:
  workflow_dispatch:

jobs:
  build-android-arm64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Android ARM64 static binary
      run: |
        # Create Dockerfile for Android ARM64 build environment
        cat > Dockerfile.android-arm64 << 'EOF'
        FROM ubuntu:22.04

        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Etc/UTC

        # Install basic dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            cmake \
            git \
            wget \
            curl \
            gnupg \
            software-properties-common \
            apt-transport-https \
            ca-certificates \
            python3 \
            bison \
            flex \
            libelf-dev \
            zlib1g-dev \
            libfl-dev \
            libcereal-dev \
            liblzma-dev \
            libiberty-dev \
            libzstd-dev \
            libncurses-dev \
            autoconf \
            libtool \
            libdwarf-dev \
            libdw-dev \
            binutils-dev \
            libxml2-dev \
            libbz2-dev \
            pkg-config \
            sed \
            libpcap-dev \
            patch

        # Install LLVM 16
        RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \
            echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main" >> /etc/apt/sources.list.d/llvm.list && \
            apt-get update && \
            apt-get install -y \
                llvm-16 \
                llvm-16-dev \
                clang-16 \
                libclang-16-dev \
                libllvm16 \
                libz3-dev && \
            # Check installation
            ls -la /usr/bin/llvm-config-16 && \
            /usr/bin/llvm-config-16 --version

        # Set LLVM 16 as default
        RUN update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-16 100 && \
            update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100
            
        # Install BCC from repository
        RUN apt-get update && \
            apt-get install -y software-properties-common && \
            apt-add-repository -y ppa:hadret/bpfcc && \
            apt-get update && \
            apt-get install -y libbpfcc-dev 

        # Install libbpf v1.5.0
        WORKDIR /opt
        RUN git clone https://github.com/libbpf/libbpf.git && \
            cd libbpf && \
            git checkout v1.5.0 && \
            cd src && \
            make BUILD_STATIC_ONLY=y OBJDIR=/tmp/libbpf DESTDIR=/tmp/libbpf install && \
            cp -r /tmp/libbpf/usr/lib64/libbpf.a /usr/lib/ && \
            cp -r /tmp/libbpf/usr/include/* /usr/include/ && \
            ls -la /usr/lib/libbpf.a && \
            find /usr/include -name "bpf*.h" | sort && \
            cat /usr/include/bpf/libbpf_version.h

        WORKDIR /bpftrace
        EOF

        # Build Docker image with platform set to arm64 and load it into Docker
        docker buildx build --platform linux/arm64 --load -t bpftrace-android-arm64 -f Dockerfile.android-arm64 .

        # Create build script
        cat > build-android-arm64.sh << 'EOF'
        #!/bin/bash
        set -ex

        # Display environment information
        echo "===== Environment Information ====="
        echo "LLVM version:"
        llvm-config --version
        echo "Include header directories:"
        ls -la /usr/include/bcc/ || echo "BCC include directory not found"
        ls -la /usr/include/bpf/ || echo "BPF include directory not found"
        echo "libbpf library:"
        find /usr -name libbpf.a || echo "libbpf.a not found"
        echo "libbcc library:"
        find /usr -name "libbcc*.a" || echo "libbcc*.a not found"
        find /usr -name "libbcc*.so" || echo "libbcc*.so not found"
        echo "libbpf version:"
        cat /usr/include/bpf/libbpf_version.h || echo "libbpf_version.h not found"
        echo "Architecture:"
        uname -m

        # Create a working directory
        mkdir -p /bpftrace-build
        cp -r /bpftrace/* /bpftrace-build/
        cd /bpftrace-build

        # Create patches to handle common issues
        cat > bpftrace_patch.txt << 'PATCH'
        --- CMakeLists.txt
        +++ CMakeLists.txt
        @@ -89,7 +89,7 @@
         find_package(LibBpf)
         
         if(LIBBPF_FOUND AND LIBBPF_VERSION VERSION_LESS 1.5)
        -  message(FATAL_ERROR "bpftrace requires libbpf 1.5 or greater")
        +  message(WARNING "bpftrace prefers libbpf 1.5 or greater, but continuing with what we have")
         endif()
         
         option(HAVE_BFD_DISASM "Use libbfd disassembler instead of LLVM" OFF)
        PATCH

        # Create a patch for src/CMakeLists.txt
        cat > src_patch.txt << 'PATCH'
        --- src/CMakeLists.txt
        +++ src/CMakeLists.txt
        @@ -42,7 +42,7 @@
         add_library(libbpftrace STATIC ${SOURCES})
         
         # Used by other programs. We link it statically for now.
        -target_link_libraries(libbpftrace PRIVATE ${LIBS_TO_LINK} zstd::libzstd_shared)
        +target_link_libraries(libbpftrace PRIVATE ${LIBS_TO_LINK} zstd)
         
         add_executable(bpftrace main.cpp)
        -target_link_libraries(bpftrace PRIVATE ast libbpftrace zstd::libzstd_shared)
        +target_link_libraries(bpftrace PRIVATE ast libbpftrace zstd)
        PATCH

        # Create a patch for ast CMakeLists.txt
        cat > ast_patch.txt << 'PATCH'
        --- src/ast/CMakeLists.txt
        +++ src/ast/CMakeLists.txt
        @@ -10,5 +10,5 @@
         add_library(ast STATIC ${SOURCES})
         
         # Used by libbpftrace and tool unit tests (main_test.cpp)
        -target_link_libraries(ast PRIVATE ${LIBBPF_LIBRARIES} ${LLVM_LIBS} zstd::libzstd_shared)
        +target_link_libraries(ast PRIVATE ${LIBBPF_LIBRARIES} ${LLVM_LIBS} zstd)
         target_include_directories(ast PUBLIC ${CMAKE_SOURCE_DIR}/src)
        PATCH

        # Apply the patches
        patch -p0 < bpftrace_patch.txt || echo "Failed to apply bpftrace patch"
        patch -p0 < src_patch.txt || echo "Failed to apply src patch"
        patch -p0 < ast_patch.txt || echo "Failed to apply ast patch"

        # Create a build directory
        mkdir -p build
        cd build

        # Configure with CMake
        LLVM_REQUESTED_VERSION=16 cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DBUILD_TESTING=OFF \
          -DSTATIC_LINKING=ON \
          -DENABLE_MAN=OFF \
          -DENABLE_LIBBLAZESYM=OFF

        # Build
        make -j$(nproc) VERBOSE=1 || make VERBOSE=1

        # Check if the binary was successfully built
        if [ -f "src/bpftrace" ]; then
          echo "Build successful!"
          file src/bpftrace
          
          # Create release package
          mkdir -p release/android-arm64
          cp src/bpftrace release/android-arm64/
          
          # Copy tools if available
          if [ -d "../tools" ]; then
            cp -r ../tools release/android-arm64/
            chmod +x release/android-arm64/tools/*.bt 2>/dev/null || true
          fi
          
          tar -czf /bpftrace/bpftrace-android-arm64-static.tar.gz -C release android-arm64
          echo "Package created: bpftrace-android-arm64-static.tar.gz"
        else
          echo "Build failed - bpftrace binary not found!"
          echo "==== Build Error Information ===="
          find . -name "*.log" -exec cat {} \; || true
          exit 1
        fi
        EOF

        chmod +x build-android-arm64.sh

        # Run build in Docker with platform set to arm64
        docker run --platform linux/arm64 --rm -v $(pwd):/bpftrace -w /bpftrace bpftrace-android-arm64 ./build-android-arm64.sh || true

        # Check if the tar.gz file was created
        if [ -f "bpftrace-android-arm64-static.tar.gz" ]; then
          echo "Build package created successfully."
        else
          echo "Build failed - package not created."
          exit 1
        fi

    - name: Upload Android ARM64 static binary artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bpftrace-android-arm64-build-logs
        path: |
          build*
          bpftrace-android-arm64-static.tar.gz
          
    - name: Create Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        name: Android ARM64 Static Build
        tag_name: android-arm64-static-${{ github.run_number }}
        files: bpftrace-android-arm64-static.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
